name: Build Klipper and Katapult according to JSON file(s)

on:
  pull_request:
    types: [opened, synchronize]
    paths:
      - 'settings/*.json'

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Expose GitHub Runtime
      uses: crazy-max/ghaction-github-runtime@v3

    - name: Expose Env
      run: |
        # ACTIONS_RUNTIME_TOKEN, ACTIONS_RUNTIME_URL should be exposed
        # Needed otherwise '@actions/artifact' will error
        env | sort

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '22.x'
        cache: 'npm'

    - name: Install dependencies
      run: npm install @actions/artifact

    - name: Cache Klipper and Katapult directories
      uses: actions/cache@v4
      with:
        path: |
          klipper
          katapult
        key: ${{ runner.os }}-build-${{ hashFiles('.github/workflows/build-klipper-katapult.yml') }}

    - name: Update Klipper repository
      run: |
        if [ -d "klipper" ]; then
          cd klipper
          git pull
          cd ..
        else
          git clone https://github.com/Klipper3d/klipper.git klipper
        fi
      shell: bash

    - name: Cache Klipper install
      uses: actions/cache@v4
      with:
        path: ci_cache
        key: ${{ runner.os }}-build-${{ hashFiles('scripts/ci-install.sh') }}

    - name: Install Klipper
      run: ./scripts/ci-install.sh
      shell: bash

    - name: Update Katapult repository
      run: |
        if [ -d "katapult" ]; then
          cd katapult
          git pull
          cd ..
        else
          git clone https://github.com/Arksine/katapult.git katapult
        fi
      shell: bash

    - name: Get changed JSON files
      id: get_json_files
      run: |
        # Get the base and head commits of the pull request
        BASE_SHA=${{ github.event.pull_request.base.sha }}
        HEAD_SHA=${{ github.event.pull_request.head.sha }}

        echo "BASE_SHA: $BASE_SHA"
        echo "HEAD_SHA: $HEAD_SHA"

        # Get the list of changed files in the pull request
        CHANGED_FILES=$(git diff --name-only --diff-filter=ACMRTUXB $BASE_SHA...$HEAD_SHA)
        echo "Changed files in the PR:"
        echo "$CHANGED_FILES"

        # Filter for JSON files in the settings folder
        SETTINGS_JSON_FILES=$(echo "$CHANGED_FILES" | grep 'settings/.*\.json' || true)
        echo "JSON files in settings folder:"
        echo "$SETTINGS_JSON_FILES"

        # Set the environment variable
        echo "CHANGED_FILES=$(echo "$SETTINGS_JSON_FILES" | tr '\n' ' ')" >> $GITHUB_ENV
      shell: bash

    - name: Process each changed JSON file for Klipper
      run: |
        for JSON_FILE in $CHANGED_FILES; do
          echo "Processing $JSON_FILE for Klipper"
          node scripts/ci-prepare_config.js "$JSON_FILE" klipper

          # Run build script
          chmod +x scripts/ci-build_klipper_katapult.sh
          ./scripts/ci-build_klipper_katapult.sh klipper

          # Check build status
          if [ $? -ne 0 ]; then
            echo "Build failed for $JSON_FILE in Klipper!"
            exit 1
          fi

          # Upload artifacts for Klipper
          node scripts/ci-upload_artifacts.js "$JSON_FILE" klipper
        done
      shell: bash
      env:
        CHANGED_FILES: ${{ env.CHANGED_FILES }}

    - name: Process each changed JSON file for Katapult
      run: |
        for JSON_FILE in $CHANGED_FILES; do
          echo "Processing $JSON_FILE for Katapult"
          node scripts/ci-prepare_config.js "$JSON_FILE" katapult

          # Run build script
          chmod +x scripts/ci-build_klipper_katapult.sh
          ./scripts/ci-build_klipper_katapult.sh katapult

          # Check build status
          if [ $? -ne 0 ]; then
            echo "Build failed for $JSON_FILE in Katapult!"
            exit 1
          fi

          # Upload artifacts for Katapult
          node scripts/ci-upload_artifacts.js "$JSON_FILE" katapult
        done
      shell: bash
      env:
        CHANGED_FILES: ${{ env.CHANGED_FILES }}
